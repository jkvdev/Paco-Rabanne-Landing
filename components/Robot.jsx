/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 phantoms.glb --transform
*/

import React, { useRef, useLayoutEffect, useState, useEffect } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";

export function Robot(props) {
  const { nodes, materials } = useGLTF(
    "./models/robot/phantoms-transformed.glb"
  );
  const robot = useRef();
  const scroll = useScroll();
  const tl = useRef();

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // Add a listener for changes to the screen size
    const mediaQuery = window.matchMedia("(max-width: 768px)");

    // Set the initial value of the `isMobile` state variable
    setIsMobile(mediaQuery.matches);

    // Define a callback function to handle changes to the media query
    const handleMediaQueryChange = (event) => {
      setIsMobile(event.matches);
    };

    // Add the callback function as a listener for changes to the media query
    mediaQuery.addEventListener("change", handleMediaQueryChange);

    // Remove the listener when the component is unmounted
    return () => {
      mediaQuery.removeEventListener("change", handleMediaQueryChange);
    };
  }, []);

  useFrame((state, delta) => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline({
      defaults: { duration: 2, ease: "power1.inOut" },
    });

    tl.current
      .to(robot.current.rotation, { y: -1 }, 4)
      .to(robot.current.position, { x: 2 }, 4)

      .to(robot.current.rotation, { y: 1 }, 9)
      .to(robot.current.position, { x: -2 }, 9)

      .to(robot.current.rotation, { y: 0 }, 13)
      .to(robot.current.rotation, { x: 1 }, 13)
      .to(robot.current.position, { x: 0 }, 13)

      .to(robot.current.rotation, { y: 0 }, 17)
      .to(robot.current.rotation, { x: -0.7 }, 17)
      .to(robot.current.position, { x: 0 }, 17)

      // .to(robot.current.rotation, { y: 0 }, 19)
      // .to(robot.current.rotation, { x: 0 }, 19)
      // .to(robot.current.position, { x: 0 }, 19)

      .to(robot.current.rotation, { y: 0 }, 20)
      .to(robot.current.rotation, { x: 0 }, 20)
      .to(robot.current.position, { x: 0 }, 20);
  }, []);

  return (
    <group {...props} dispose={null} ref={robot}>
      <group position={[-0.21, 0.16, 0.37]} rotation={[0, 0, 0]} scale={isMobile ? 0.13 : 0.15}>
        <mesh
          geometry={nodes.Cube003.geometry}
          material={materials.Metal}
          castShadow
        >
          <meshPhysicalMaterial
            color="#aaa"
            roughness={0.2}
            metalness={1}
            reflectivity={0.5}
            iridescence={0.3}
            iridescenceIOR={1}
            iridescenceThicknessRange={[100, 1000]}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube003_1.geometry}
          material={materials.Metal}
          castShadow
        >
          <meshPhysicalMaterial
            color="#000000"
            roughness={1}
            emissive={"#000"}
            clearcoat={1}
            reflectivity={0.2}
            metalness={0}
            iridescence={0.1}
            iridescenceIOR={1}
            iridescenceThicknessRange={[100, 1000]}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("./models/robot/phantoms-transformed.glb");
